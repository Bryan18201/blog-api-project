{
    "sourceFile": "controllers/users/users.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1692037811438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1692038150511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,13 +25,9 @@\n       fullname,\n       email,\n       password: passswordHashed,\n     });\n-    console.log(user);\n-    res.json({\n-      status: \"success\",\n-      data: user,\n-    });\n+    \n   } catch (error) {\n     res.json(error);\n   }\n };\n"
                },
                {
                    "date": 1692038162658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,241 @@\n+const bcrypt = require(\"bcryptjs\");\n+const User = require(\"../../model/user/User\");\n+const appErr = require(\"../../utils/appErr\");\n+\n+//register\n+const registerCtrl = async (req, res, next) => {\n+  console.log(req.body);\n+  const { fullname, email, password } = req.body;\n+  //check if field is empty\n+  if (!fullname || !email || !password) {\n+    return next(appErr(\"All fields are required\"));\n+  }\n+  try {\n+    //1. check if user exist (email)\n+    const userFound = await User.findOne({ email });\n+    //throw an error\n+    if (userFound) {\n+      return next(appErr(\"User already Exists\"));\n+    }\n+    //Hash passsword\n+    const salt = await bcrypt.genSalt(10);\n+    const passswordHashed = await bcrypt.hash(password, salt);\n+    //register user\n+    const user = await User.create({\n+      fullname,\n+      email,\n+      password: passswordHashed,\n+    });\n+    // redirect\n+    res.redirect()\n+  } catch (error) {\n+    res.json(error);\n+  }\n+};\n+\n+//login\n+const loginCtrl = async (req, res, next) => {\n+  const { email, password } = req.body;\n+  if (!email || !password) {\n+    return next(appErr(\"Email and password fields are required\"));\n+  }\n+  try {\n+    //Check if email exist\n+    const userFound = await User.findOne({ email });\n+    if (!userFound) {\n+      //throw an error\n+      return next(appErr(\"Invalid login credentials\"));\n+    }\n+    //verify password\n+    const isPasswordValid = await bcrypt.compare(password, userFound.password);\n+    if (!isPasswordValid) {\n+      //throw an error\n+      return next(appErr(\"Invalid login credentials\"));\n+    }\n+    //save the user into\n+    req.session.userAuth = userFound._id;\n+    console.log(req.session);\n+    res.json({\n+      status: \"success\",\n+      data: userFound,\n+    });\n+  } catch (error) {\n+    res.json(error);\n+  }\n+};\n+\n+//details\n+const userDetailsCtrl = async (req, res) => {\n+  try {\n+    //get userId from params\n+    const userId = req.params.id;\n+    //find the user\n+    const user = await User.findById(userId);\n+    res.json({\n+      status: \"success\",\n+      data: user,\n+    });\n+  } catch (error) {\n+    res.json(error);\n+  }\n+};\n+//profile\n+const profileCtrl = async (req, res) => {\n+  try {\n+    //get the login user\n+    const userID = req.session.userAuth;\n+    //find the user\n+    const user = await User.findById(userID)\n+      .populate(\"posts\")\n+      .populate(\"comments\");\n+    res.json({\n+      status: \"success\",\n+      data: user,\n+    });\n+  } catch (error) {\n+    res.json(error);\n+  }\n+};\n+\n+//upload profile photo\n+const uploadProfilePhotoCtrl = async (req, res, next) => {\n+  console.log(req.file.path);\n+  try {\n+    //1. Find the user to be updated\n+    const userId = req.session.userAuth;\n+    const userFound = await User.findById(userId);\n+    //2. check if user is found\n+    if (!userFound) {\n+      return next(appErr(\"User not found\", 403));\n+    }\n+    //5.Update profile photo\n+    const userUpdated = await User.findByIdAndUpdate(\n+      userId,\n+      {\n+        profileImage: req.file.path,\n+      },\n+      {\n+        new: true,\n+      }\n+    );\n+    res.json({\n+      status: \"success\",\n+      data: userUpdated,\n+    });\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//upload cover image\n+\n+const uploadCoverImgCtrl = async (req, res) => {\n+  try {\n+    //1. Find the user to be updated\n+    const userId = req.session.userAuth;\n+    const userFound = await User.findById(userId);\n+    //2. check if user is found\n+    if (!userFound) {\n+      return next(appErr(\"User not found\", 403));\n+    }\n+    //5.Update profile photo\n+    const userUpdated = await User.findByIdAndUpdate(\n+      userId,\n+      {\n+        coverImage: req.file.path,\n+      },\n+      {\n+        new: true,\n+      }\n+    );\n+    res.json({\n+      status: \"success\",\n+      data: userUpdated,\n+    });\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//update password\n+const updatePasswordCtrl = async (req, res, next) => {\n+  const { password } = req.body;\n+  try {\n+    //Check if user is updating the password\n+    if (password) {\n+      const salt = await bcrypt.genSalt(10);\n+      const passswordHashed = await bcrypt.hash(password, salt);\n+      //update user\n+      await User.findByIdAndUpdate(\n+        req.params.id,\n+        {\n+          password: passswordHashed,\n+        },\n+        {\n+          new: true,\n+        }\n+      );\n+      res.json({\n+        status: \"success\",\n+        user: \"Password has been changed successfully\",\n+      });\n+    }\n+  } catch (error) {\n+    return next(appErr(\"Please provide password field\"));\n+  }\n+};\n+\n+//update user\n+const updateUserCtrl = async (req, res, next) => {\n+  const { fullname, email } = req.body;\n+  try {\n+    //Check if email is not taken\n+    if (email) {\n+      const emailTaken = await User.findOne({ email });\n+      if (emailTaken) {\n+        return next(appErr(\"Email is taken\", 400));\n+      }\n+    }\n+    //update the user\n+    const user = await User.findByIdAndUpdate(\n+      req.params.id,\n+      {\n+        fullname,\n+        email,\n+      },\n+      {\n+        new: true,\n+      }\n+    );\n+    res.json({\n+      status: \"success\",\n+      data: user,\n+    });\n+  } catch (error) {\n+    res.json(next(appErr(error.message)));\n+  }\n+};\n+\n+//logout\n+const logoutCtrl = async (req, res) => {\n+  try {\n+    res.json({\n+      status: \"success\",\n+      user: \"User logout\",\n+    });\n+  } catch (error) {\n+    res.json(error);\n+  }\n+};\n+\n+module.exports = {\n+  registerCtrl,\n+  loginCtrl,\n+  userDetailsCtrl,\n+  profileCtrl,\n+  uploadProfilePhotoCtrl,\n+  uploadCoverImgCtrl,\n+  updatePasswordCtrl,\n+  updateUserCtrl,\n+  logoutCtrl,\n+};\n"
                }
            ],
            "date": 1692037811438,
            "name": "Commit-0",
            "content": "const bcrypt = require(\"bcryptjs\");\nconst User = require(\"../../model/user/User\");\nconst appErr = require(\"../../utils/appErr\");\n\n//register\nconst registerCtrl = async (req, res, next) => {\n  console.log(req.body);\n  const { fullname, email, password } = req.body;\n  //check if field is empty\n  if (!fullname || !email || !password) {\n    return next(appErr(\"All fields are required\"));\n  }\n  try {\n    //1. check if user exist (email)\n    const userFound = await User.findOne({ email });\n    //throw an error\n    if (userFound) {\n      return next(appErr(\"User already Exists\"));\n    }\n    //Hash passsword\n    const salt = await bcrypt.genSalt(10);\n    const passswordHashed = await bcrypt.hash(password, salt);\n    //register user\n    const user = await User.create({\n      fullname,\n      email,\n      password: passswordHashed,\n    });\n    console.log();\n    res.json({\n      status: \"success\",\n      data: user,\n    });\n  } catch (error) {\n    res.json(error);\n  }\n};\n\n//login\nconst loginCtrl = async (req, res, next) => {\n  const { email, password } = req.body;\n  if (!email || !password) {\n    return next(appErr(\"Email and password fields are required\"));\n  }\n  try {\n    //Check if email exist\n    const userFound = await User.findOne({ email });\n    if (!userFound) {\n      //throw an error\n      return next(appErr(\"Invalid login credentials\"));\n    }\n    //verify password\n    const isPasswordValid = await bcrypt.compare(password, userFound.password);\n    if (!isPasswordValid) {\n      //throw an error\n      return next(appErr(\"Invalid login credentials\"));\n    }\n    //save the user into\n    req.session.userAuth = userFound._id;\n    console.log(req.session);\n    res.json({\n      status: \"success\",\n      data: userFound,\n    });\n  } catch (error) {\n    res.json(error);\n  }\n};\n\n//details\nconst userDetailsCtrl = async (req, res) => {\n  try {\n    //get userId from params\n    const userId = req.params.id;\n    //find the user\n    const user = await User.findById(userId);\n    res.json({\n      status: \"success\",\n      data: user,\n    });\n  } catch (error) {\n    res.json(error);\n  }\n};\n//profile\nconst profileCtrl = async (req, res) => {\n  try {\n    //get the login user\n    const userID = req.session.userAuth;\n    //find the user\n    const user = await User.findById(userID)\n      .populate(\"posts\")\n      .populate(\"comments\");\n    res.json({\n      status: \"success\",\n      data: user,\n    });\n  } catch (error) {\n    res.json(error);\n  }\n};\n\n//upload profile photo\nconst uploadProfilePhotoCtrl = async (req, res, next) => {\n  console.log(req.file.path);\n  try {\n    //1. Find the user to be updated\n    const userId = req.session.userAuth;\n    const userFound = await User.findById(userId);\n    //2. check if user is found\n    if (!userFound) {\n      return next(appErr(\"User not found\", 403));\n    }\n    //5.Update profile photo\n    const userUpdated = await User.findByIdAndUpdate(\n      userId,\n      {\n        profileImage: req.file.path,\n      },\n      {\n        new: true,\n      }\n    );\n    res.json({\n      status: \"success\",\n      data: userUpdated,\n    });\n  } catch (error) {\n    next(appErr(error.message));\n  }\n};\n\n//upload cover image\n\nconst uploadCoverImgCtrl = async (req, res) => {\n  try {\n    //1. Find the user to be updated\n    const userId = req.session.userAuth;\n    const userFound = await User.findById(userId);\n    //2. check if user is found\n    if (!userFound) {\n      return next(appErr(\"User not found\", 403));\n    }\n    //5.Update profile photo\n    const userUpdated = await User.findByIdAndUpdate(\n      userId,\n      {\n        coverImage: req.file.path,\n      },\n      {\n        new: true,\n      }\n    );\n    res.json({\n      status: \"success\",\n      data: userUpdated,\n    });\n  } catch (error) {\n    next(appErr(error.message));\n  }\n};\n\n//update password\nconst updatePasswordCtrl = async (req, res, next) => {\n  const { password } = req.body;\n  try {\n    //Check if user is updating the password\n    if (password) {\n      const salt = await bcrypt.genSalt(10);\n      const passswordHashed = await bcrypt.hash(password, salt);\n      //update user\n      await User.findByIdAndUpdate(\n        req.params.id,\n        {\n          password: passswordHashed,\n        },\n        {\n          new: true,\n        }\n      );\n      res.json({\n        status: \"success\",\n        user: \"Password has been changed successfully\",\n      });\n    }\n  } catch (error) {\n    return next(appErr(\"Please provide password field\"));\n  }\n};\n\n//update user\nconst updateUserCtrl = async (req, res, next) => {\n  const { fullname, email } = req.body;\n  try {\n    //Check if email is not taken\n    if (email) {\n      const emailTaken = await User.findOne({ email });\n      if (emailTaken) {\n        return next(appErr(\"Email is taken\", 400));\n      }\n    }\n    //update the user\n    const user = await User.findByIdAndUpdate(\n      req.params.id,\n      {\n        fullname,\n        email,\n      },\n      {\n        new: true,\n      }\n    );\n    res.json({\n      status: \"success\",\n      data: user,\n    });\n  } catch (error) {\n    res.json(next(appErr(error.message)));\n  }\n};\n\n//logout\nconst logoutCtrl = async (req, res) => {\n  try {\n    res.json({\n      status: \"success\",\n      user: \"User logout\",\n    });\n  } catch (error) {\n    res.json(error);\n  }\n};\n\nmodule.exports = {\n  registerCtrl,\n  loginCtrl,\n  userDetailsCtrl,\n  profileCtrl,\n  uploadProfilePhotoCtrl,\n  uploadCoverImgCtrl,\n  updatePasswordCtrl,\n  updateUserCtrl,\n  logoutCtrl,\n};\n"
        }
    ]
}