{
    "sourceFile": "controllers/posts/posts.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1692706544832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1692706554673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,120 @@\n+const Post = require(\"../../model/post/Post\");\n+const User = require(\"../../model/user/User\");\n+const appErr = require(\"../../utils/appErr\");\n+//create\n+const createPostCtrl = async (req, res, next) => {\n+  const { title, description, category, user } = req.body;\n+  try {\n+    if (!title || !description || !category || !req.file) {\n+      return res.render(\"posts/addPost\", { error: \"All fields are required\" });\n+    }\n+    //Find the user\n+    const userId = req.session.userAuth;\n+    const userFound = await User.findById(userId);\n+    //Create the post\n+    const postCreated = await Post.create({\n+      title,\n+      description,\n+      category,\n+      user: userFound._id,\n+      image: req.file.path,\n+    });\n+    //push the post created into the array of user's posts\n+    userFound.posts.push(postCreated._id);\n+    //re save\n+    await userFound.save();\n+    res.redirect(\"/\");\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//all\n+const fetchPostsCtrl = async (req, res, next) => {\n+  try {\n+    const posts = await Post.find().populate(\"comments\").populate(\"user\");\n+    res.json({\n+      status: \"success\",\n+      data: posts,\n+    });\n+    res.render('posts/details')\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//details\n+const fetchPostCtrl = async (req, res, next) => {\n+  try {\n+    //get the id from params\n+    const id = req.params.id;\n+    //find the post\n+    const post = await Post.findById(id).populate(\"comments\");\n+    res.json({\n+      status: \"success\",\n+      data: post,\n+    });\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//delete\n+const deletePostCtrl = async (req, res, next) => {\n+  try {\n+    //find the post\n+    const post = await Post.findById(req.params.id);\n+    //check if the post belongs to the user\n+    if (post.user.toString() !== req.session.userAuth.toString()) {\n+      return next(appErr(\"You are not allowed to delete this post\", 403));\n+    }\n+    //delete post\n+    await Post.findByIdAndDelete(req.params.id);\n+    res.json({\n+      status: \"success\",\n+      data: \"Post has been deleted successfully\",\n+    });\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//update\n+const updatepostCtrl = async (req, res, next) => {\n+  const { title, description, category } = req.body;\n+  try {\n+    //find the post\n+    const post = await Post.findById(req.params.id);\n+    //check if the post belongs to the user\n+    if (post.user.toString() !== req.session.userAuth.toString()) {\n+      return next(appErr(\"You are not allowed to update this post\", 403));\n+    }\n+    //update\n+    const postUpdated = await Post.findByIdAndUpdate(\n+      req.params.id,\n+      {\n+        title,\n+        description,\n+        category,\n+        image: req.file.path,\n+      },\n+      {\n+        new: true,\n+      }\n+    );\n+\n+    res.json({\n+      status: \"success\",\n+      data: postUpdated,\n+    });\n+  } catch (error) {\n+    res.json(error);\n+  }\n+};\n+module.exports = {\n+  createPostCtrl,\n+  fetchPostsCtrl,\n+  fetchPostCtrl,\n+  deletePostCtrl,\n+  updatepostCtrl,\n+};\n"
                },
                {
                    "date": 1692706561932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,123 @@\n+const Post = require(\"../../model/post/Post\");\n+const User = require(\"../../model/user/User\");\n+const appErr = require(\"../../utils/appErr\");\n+//create\n+const createPostCtrl = async (req, res, next) => {\n+  const { title, description, category, user } = req.body;\n+  try {\n+    if (!title || !description || !category || !req.file) {\n+      return res.render(\"posts/addPost\", { error: \"All fields are required\" });\n+    }\n+    //Find the user\n+    const userId = req.session.userAuth;\n+    const userFound = await User.findById(userId);\n+    //Create the post\n+    const postCreated = await Post.create({\n+      title,\n+      description,\n+      category,\n+      user: userFound._id,\n+      image: req.file.path,\n+    });\n+    //push the post created into the array of user's posts\n+    userFound.posts.push(postCreated._id);\n+    //re save\n+    await userFound.save();\n+    res.redirect(\"/\");\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//all\n+const fetchPostsCtrl = async (req, res, next) => {\n+  try {\n+    const posts = await Post.find().populate(\"comments\").populate(\"user\");\n+    res.json({\n+      status: \"success\",\n+      data: posts,\n+    });\n+    res.render('posts/details'){\n+      post,\n+      \n+    }\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//details\n+const fetchPostCtrl = async (req, res, next) => {\n+  try {\n+    //get the id from params\n+    const id = req.params.id;\n+    //find the post\n+    const post = await Post.findById(id).populate(\"comments\");\n+    res.json({\n+      status: \"success\",\n+      data: post,\n+    });\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//delete\n+const deletePostCtrl = async (req, res, next) => {\n+  try {\n+    //find the post\n+    const post = await Post.findById(req.params.id);\n+    //check if the post belongs to the user\n+    if (post.user.toString() !== req.session.userAuth.toString()) {\n+      return next(appErr(\"You are not allowed to delete this post\", 403));\n+    }\n+    //delete post\n+    await Post.findByIdAndDelete(req.params.id);\n+    res.json({\n+      status: \"success\",\n+      data: \"Post has been deleted successfully\",\n+    });\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//update\n+const updatepostCtrl = async (req, res, next) => {\n+  const { title, description, category } = req.body;\n+  try {\n+    //find the post\n+    const post = await Post.findById(req.params.id);\n+    //check if the post belongs to the user\n+    if (post.user.toString() !== req.session.userAuth.toString()) {\n+      return next(appErr(\"You are not allowed to update this post\", 403));\n+    }\n+    //update\n+    const postUpdated = await Post.findByIdAndUpdate(\n+      req.params.id,\n+      {\n+        title,\n+        description,\n+        category,\n+        image: req.file.path,\n+      },\n+      {\n+        new: true,\n+      }\n+    );\n+\n+    res.json({\n+      status: \"success\",\n+      data: postUpdated,\n+    });\n+  } catch (error) {\n+    res.json(error);\n+  }\n+};\n+module.exports = {\n+  createPostCtrl,\n+  fetchPostsCtrl,\n+  fetchPostCtrl,\n+  deletePostCtrl,\n+  updatepostCtrl,\n+};\n"
                },
                {
                    "date": 1692706568295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,120 @@\n+const Post = require(\"../../model/post/Post\");\n+const User = require(\"../../model/user/User\");\n+const appErr = require(\"../../utils/appErr\");\n+//create\n+const createPostCtrl = async (req, res, next) => {\n+  const { title, description, category, user } = req.body;\n+  try {\n+    if (!title || !description || !category || !req.file) {\n+      return res.render(\"posts/addPost\", { error: \"All fields are required\" });\n+    }\n+    //Find the user\n+    const userId = req.session.userAuth;\n+    const userFound = await User.findById(userId);\n+    //Create the post\n+    const postCreated = await Post.create({\n+      title,\n+      description,\n+      category,\n+      user: userFound._id,\n+      image: req.file.path,\n+    });\n+    //push the post created into the array of user's posts\n+    userFound.posts.push(postCreated._id);\n+    //re save\n+    await userFound.save();\n+    res.redirect(\"/\");\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//all\n+const fetchPostsCtrl = async (req, res, next) => {\n+  try {\n+    const posts = await Post.find().populate(\"comments\").populate(\"user\");\n+    res.json({\n+      status: \"success\",\n+      data: posts,\n+    });\n+    res.render('posts/details')\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//details\n+const fetchPostCtrl = async (req, res, next) => {\n+  try {\n+    //get the id from params\n+    const id = req.params.id;\n+    //find the post\n+    const post = await Post.findById(id).populate(\"comments\");\n+    res.json({\n+      status: \"success\",\n+      data: post,\n+    });\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//delete\n+const deletePostCtrl = async (req, res, next) => {\n+  try {\n+    //find the post\n+    const post = await Post.findById(req.params.id);\n+    //check if the post belongs to the user\n+    if (post.user.toString() !== req.session.userAuth.toString()) {\n+      return next(appErr(\"You are not allowed to delete this post\", 403));\n+    }\n+    //delete post\n+    await Post.findByIdAndDelete(req.params.id);\n+    res.json({\n+      status: \"success\",\n+      data: \"Post has been deleted successfully\",\n+    });\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//update\n+const updatepostCtrl = async (req, res, next) => {\n+  const { title, description, category } = req.body;\n+  try {\n+    //find the post\n+    const post = await Post.findById(req.params.id);\n+    //check if the post belongs to the user\n+    if (post.user.toString() !== req.session.userAuth.toString()) {\n+      return next(appErr(\"You are not allowed to update this post\", 403));\n+    }\n+    //update\n+    const postUpdated = await Post.findByIdAndUpdate(\n+      req.params.id,\n+      {\n+        title,\n+        description,\n+        category,\n+        image: req.file.path,\n+      },\n+      {\n+        new: true,\n+      }\n+    );\n+\n+    res.json({\n+      status: \"success\",\n+      data: postUpdated,\n+    });\n+  } catch (error) {\n+    res.json(error);\n+  }\n+};\n+module.exports = {\n+  createPostCtrl,\n+  fetchPostsCtrl,\n+  fetchPostCtrl,\n+  deletePostCtrl,\n+  updatepostCtrl,\n+};\n"
                },
                {
                    "date": 1692706576439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,122 @@\n+const Post = require(\"../../model/post/Post\");\n+const User = require(\"../../model/user/User\");\n+const appErr = require(\"../../utils/appErr\");\n+//create\n+const createPostCtrl = async (req, res, next) => {\n+  const { title, description, category, user } = req.body;\n+  try {\n+    if (!title || !description || !category || !req.file) {\n+      return res.render(\"posts/addPost\", { error: \"All fields are required\" });\n+    }\n+    //Find the user\n+    const userId = req.session.userAuth;\n+    const userFound = await User.findById(userId);\n+    //Create the post\n+    const postCreated = await Post.create({\n+      title,\n+      description,\n+      category,\n+      user: userFound._id,\n+      image: req.file.path,\n+    });\n+    //push the post created into the array of user's posts\n+    userFound.posts.push(postCreated._id);\n+    //re save\n+    await userFound.save();\n+    res.redirect(\"/\");\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//all\n+const fetchPostsCtrl = async (req, res, next) => {\n+  try {\n+    const posts = await Post.find().populate(\"comments\").populate(\"user\");\n+    res.json({\n+      status: \"success\",\n+      data: posts,\n+    });\n+    res.render('posts/details', {\n+\n+    });\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//details\n+const fetchPostCtrl = async (req, res, next) => {\n+  try {\n+    //get the id from params\n+    const id = req.params.id;\n+    //find the post\n+    const post = await Post.findById(id).populate(\"comments\");\n+    res.json({\n+      status: \"success\",\n+      data: post,\n+    });\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//delete\n+const deletePostCtrl = async (req, res, next) => {\n+  try {\n+    //find the post\n+    const post = await Post.findById(req.params.id);\n+    //check if the post belongs to the user\n+    if (post.user.toString() !== req.session.userAuth.toString()) {\n+      return next(appErr(\"You are not allowed to delete this post\", 403));\n+    }\n+    //delete post\n+    await Post.findByIdAndDelete(req.params.id);\n+    res.json({\n+      status: \"success\",\n+      data: \"Post has been deleted successfully\",\n+    });\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//update\n+const updatepostCtrl = async (req, res, next) => {\n+  const { title, description, category } = req.body;\n+  try {\n+    //find the post\n+    const post = await Post.findById(req.params.id);\n+    //check if the post belongs to the user\n+    if (post.user.toString() !== req.session.userAuth.toString()) {\n+      return next(appErr(\"You are not allowed to update this post\", 403));\n+    }\n+    //update\n+    const postUpdated = await Post.findByIdAndUpdate(\n+      req.params.id,\n+      {\n+        title,\n+        description,\n+        category,\n+        image: req.file.path,\n+      },\n+      {\n+        new: true,\n+      }\n+    );\n+\n+    res.json({\n+      status: \"success\",\n+      data: postUpdated,\n+    });\n+  } catch (error) {\n+    res.json(error);\n+  }\n+};\n+module.exports = {\n+  createPostCtrl,\n+  fetchPostsCtrl,\n+  fetchPostCtrl,\n+  deletePostCtrl,\n+  updatepostCtrl,\n+};\n"
                },
                {
                    "date": 1692706585213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,123 @@\n+const Post = require(\"../../model/post/Post\");\n+const User = require(\"../../model/user/User\");\n+const appErr = require(\"../../utils/appErr\");\n+//create\n+const createPostCtrl = async (req, res, next) => {\n+  const { title, description, category, user } = req.body;\n+  try {\n+    if (!title || !description || !category || !req.file) {\n+      return res.render(\"posts/addPost\", { error: \"All fields are required\" });\n+    }\n+    //Find the user\n+    const userId = req.session.userAuth;\n+    const userFound = await User.findById(userId);\n+    //Create the post\n+    const postCreated = await Post.create({\n+      title,\n+      description,\n+      category,\n+      user: userFound._id,\n+      image: req.file.path,\n+    });\n+    //push the post created into the array of user's posts\n+    userFound.posts.push(postCreated._id);\n+    //re save\n+    await userFound.save();\n+    res.redirect(\"/\");\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//all\n+const fetchPostsCtrl = async (req, res, next) => {\n+  try {\n+    const posts = await Post.find().populate(\"comments\").populate(\"user\");\n+    res.json({\n+      status: \"success\",\n+      data: posts,\n+    });\n+    res.render('posts/details', {\n+      post,\n+      error: \"\"\n+    });\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//details\n+const fetchPostCtrl = async (req, res, next) => {\n+  try {\n+    //get the id from params\n+    const id = req.params.id;\n+    //find the post\n+    const post = await Post.findById(id).populate(\"comments\");\n+    res.json({\n+      status: \"success\",\n+      data: post,\n+    });\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//delete\n+const deletePostCtrl = async (req, res, next) => {\n+  try {\n+    //find the post\n+    const post = await Post.findById(req.params.id);\n+    //check if the post belongs to the user\n+    if (post.user.toString() !== req.session.userAuth.toString()) {\n+      return next(appErr(\"You are not allowed to delete this post\", 403));\n+    }\n+    //delete post\n+    await Post.findByIdAndDelete(req.params.id);\n+    res.json({\n+      status: \"success\",\n+      data: \"Post has been deleted successfully\",\n+    });\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//update\n+const updatepostCtrl = async (req, res, next) => {\n+  const { title, description, category } = req.body;\n+  try {\n+    //find the post\n+    const post = await Post.findById(req.params.id);\n+    //check if the post belongs to the user\n+    if (post.user.toString() !== req.session.userAuth.toString()) {\n+      return next(appErr(\"You are not allowed to update this post\", 403));\n+    }\n+    //update\n+    const postUpdated = await Post.findByIdAndUpdate(\n+      req.params.id,\n+      {\n+        title,\n+        description,\n+        category,\n+        image: req.file.path,\n+      },\n+      {\n+        new: true,\n+      }\n+    );\n+\n+    res.json({\n+      status: \"success\",\n+      data: postUpdated,\n+    });\n+  } catch (error) {\n+    res.json(error);\n+  }\n+};\n+module.exports = {\n+  createPostCtrl,\n+  fetchPostsCtrl,\n+  fetchPostCtrl,\n+  deletePostCtrl,\n+  updatepostCtrl,\n+};\n"
                },
                {
                    "date": 1692707845824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,9 @@\n //all\n const fetchPostsCtrl = async (req, res, next) => {\n   try {\n     const posts = await Post.find().populate(\"comments\").populate(\"user\");\n-    res.json({\n-      status: \"success\",\n-      data: posts,\n-    });\n+    \n     res.render('posts/details', {\n       post,\n       error: \"\",\n     });\n"
                },
                {
                    "date": 1692707869228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,120 @@\n+const Post = require(\"../../model/post/Post\");\n+const User = require(\"../../model/user/User\");\n+const appErr = require(\"../../utils/appErr\");\n+//create\n+const createPostCtrl = async (req, res, next) => {\n+  const { title, description, category, user } = req.body;\n+  try {\n+    if (!title || !description || !category || !req.file) {\n+      return res.render(\"posts/addPost\", { error: \"All fields are required\" });\n+    }\n+    //Find the user\n+    const userId = req.session.userAuth;\n+    const userFound = await User.findById(userId);\n+    //Create the post\n+    const postCreated = await Post.create({\n+      title,\n+      description,\n+      category,\n+      user: userFound._id,\n+      image: req.file.path,\n+    });\n+    //push the post created into the array of user's posts\n+    userFound.posts.push(postCreated._id);\n+    //re save\n+    await userFound.save();\n+    res.redirect(\"/\");\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//all\n+const fetchPostsCtrl = async (req, res, next) => {\n+  try {\n+    const posts = await Post.find().populate(\"comments\").populate(\"user\");\n+    \n+    res.render('posts/details', {\n+      posts,\n+      error: \"\",\n+    });\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//details\n+const fetchPostCtrl = async (req, res, next) => {\n+  try {\n+    //get the id from params\n+    const id = req.params.id;\n+    //find the post\n+    const post = await Post.findById(id).populate(\"comments\");\n+    res.json({\n+      status: \"success\",\n+      data: post,\n+    });\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//delete\n+const deletePostCtrl = async (req, res, next) => {\n+  try {\n+    //find the post\n+    const post = await Post.findById(req.params.id);\n+    //check if the post belongs to the user\n+    if (post.user.toString() !== req.session.userAuth.toString()) {\n+      return next(appErr(\"You are not allowed to delete this post\", 403));\n+    }\n+    //delete post\n+    await Post.findByIdAndDelete(req.params.id);\n+    res.json({\n+      status: \"success\",\n+      data: \"Post has been deleted successfully\",\n+    });\n+  } catch (error) {\n+    next(appErr(error.message));\n+  }\n+};\n+\n+//update\n+const updatepostCtrl = async (req, res, next) => {\n+  const { title, description, category } = req.body;\n+  try {\n+    //find the post\n+    const post = await Post.findById(req.params.id);\n+    //check if the post belongs to the user\n+    if (post.user.toString() !== req.session.userAuth.toString()) {\n+      return next(appErr(\"You are not allowed to update this post\", 403));\n+    }\n+    //update\n+    const postUpdated = await Post.findByIdAndUpdate(\n+      req.params.id,\n+      {\n+        title,\n+        description,\n+        category,\n+        image: req.file.path,\n+      },\n+      {\n+        new: true,\n+      }\n+    );\n+\n+    res.json({\n+      status: \"success\",\n+      data: postUpdated,\n+    });\n+  } catch (error) {\n+    res.json(error);\n+  }\n+};\n+module.exports = {\n+  createPostCtrl,\n+  fetchPostsCtrl,\n+  fetchPostCtrl,\n+  deletePostCtrl,\n+  updatepostCtrl,\n+};\n"
                }
            ],
            "date": 1692706544832,
            "name": "Commit-0",
            "content": "const Post = require(\"../../model/post/Post\");\nconst User = require(\"../../model/user/User\");\nconst appErr = require(\"../../utils/appErr\");\n//create\nconst createPostCtrl = async (req, res, next) => {\n  const { title, description, category, user } = req.body;\n  try {\n    if (!title || !description || !category || !req.file) {\n      return res.render(\"posts/addPost\", { error: \"All fields are required\" });\n    }\n    //Find the user\n    const userId = req.session.userAuth;\n    const userFound = await User.findById(userId);\n    //Create the post\n    const postCreated = await Post.create({\n      title,\n      description,\n      category,\n      user: userFound._id,\n      image: req.file.path,\n    });\n    //push the post created into the array of user's posts\n    userFound.posts.push(postCreated._id);\n    //re save\n    await userFound.save();\n    res.redirect(\"/\");\n  } catch (error) {\n    next(appErr(error.message));\n  }\n};\n\n//all\nconst fetchPostsCtrl = async (req, res, next) => {\n  try {\n    const posts = await Post.find().populate(\"comments\").populate(\"user\");\n    res.json({\n      status: \"success\",\n      data: posts,\n    });\n    res.render\n  } catch (error) {\n    next(appErr(error.message));\n  }\n};\n\n//details\nconst fetchPostCtrl = async (req, res, next) => {\n  try {\n    //get the id from params\n    const id = req.params.id;\n    //find the post\n    const post = await Post.findById(id).populate(\"comments\");\n    res.json({\n      status: \"success\",\n      data: post,\n    });\n  } catch (error) {\n    next(appErr(error.message));\n  }\n};\n\n//delete\nconst deletePostCtrl = async (req, res, next) => {\n  try {\n    //find the post\n    const post = await Post.findById(req.params.id);\n    //check if the post belongs to the user\n    if (post.user.toString() !== req.session.userAuth.toString()) {\n      return next(appErr(\"You are not allowed to delete this post\", 403));\n    }\n    //delete post\n    await Post.findByIdAndDelete(req.params.id);\n    res.json({\n      status: \"success\",\n      data: \"Post has been deleted successfully\",\n    });\n  } catch (error) {\n    next(appErr(error.message));\n  }\n};\n\n//update\nconst updatepostCtrl = async (req, res, next) => {\n  const { title, description, category } = req.body;\n  try {\n    //find the post\n    const post = await Post.findById(req.params.id);\n    //check if the post belongs to the user\n    if (post.user.toString() !== req.session.userAuth.toString()) {\n      return next(appErr(\"You are not allowed to update this post\", 403));\n    }\n    //update\n    const postUpdated = await Post.findByIdAndUpdate(\n      req.params.id,\n      {\n        title,\n        description,\n        category,\n        image: req.file.path,\n      },\n      {\n        new: true,\n      }\n    );\n\n    res.json({\n      status: \"success\",\n      data: postUpdated,\n    });\n  } catch (error) {\n    res.json(error);\n  }\n};\nmodule.exports = {\n  createPostCtrl,\n  fetchPostsCtrl,\n  fetchPostCtrl,\n  deletePostCtrl,\n  updatepostCtrl,\n};\n"
        }
    ]
}