{
    "sourceFile": "controllers/comments/comments.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1692731874960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1692731880039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,107 @@\n+const Comment = require(\"../../model/comment/Comment\");\n+const Post = require(\"../../model/post/Post\");\n+const User = require(\"../../model/user/User\");\n+const appErr = require(\"../../utils/appErr\");\n+//create\n+const createCommentCtrl = async (req, res, next) => {\n+  const { message } = req.body;\n+  try {\n+    //Find the post\n+    const post = await Post.findById(req.params.id);\n+    //create the comment\n+    const comment = await Comment.create({\n+      user: req.session.userAuth,\n+      message,\n+      post: post._id,\n+    });\n+    //push the comment to post\n+    post.comments.push(comment._id);\n+    //find the user\n+    const user = await User.findById(req.session.userAuth);\n+    //push the comment into\n+    user.comments.push(comment._id);\n+    //disable validation\n+    //save\n+    await post.save({ validateBeforeSave: false });\n+    await user.save({ validateBeforeSave: false });\n+    \n+    //redirect\n+    res.redirect(`/api/v1/posts/${post._id}`);\n+  } catch (error) {\n+    next(appErr(error));\n+  }\n+};\n+\n+//single\n+const commentDetailsCtrl = async (req, res, next) => {\n+  try {\n+    const comment = await Comment.findById(req.params.id);\n+    res.render(\"comments/updateComment\", {\n+      comment,\n+      error: \"\",\n+    });\n+    \n+  } catch (error) {\n+    res.render(\"comments/updateComment\", {\n+      error: error.message,\n+    });\n+  }\n+};\n+\n+//delete\n+const deleteCommentCtrl = async (req, res, next) => {\n+ \n+  try {\n+    //find the comment\n+    const comment = await Comment.findById(req.params.id);\n+    //check if the comment belongs to the user\n+    if (comment.user.toString() !== req.session.userAuth.toString()) {\n+      return next(appErr(\"You are not allowed to delete this comment\", 403));\n+    }\n+    //delete comment\n+    await Comment.findByIdAndDelete(req.params.id);\n+    //redirect\n+    res.redirect(`/api/v1/posts/${req.query.postId}`);\n+  } catch (error) {\n+    next(appErr(error));\n+  }\n+};\n+\n+//Update\n+const upddateCommentCtrl = async (req, res, next) => {\n+  try {\n+    console.log(\"query\", req.query);\n+    //find the comment\n+    const comment = await Comment.findById(req.params.id);\n+\n+    if (!comment) {\n+      return next(appErr(\"Comment Not Found\"));\n+    }\n+    //check if the post belongs to the user\n+    if (comment.user.toString() !== req.session.userAuth.toString()) {\n+      return next(appErr(\"You are not allowed to update this comment\", 403));\n+    }\n+    //update\n+    const commentUpdated = await Comment.findByIdAndUpdate(\n+      req.params.id,\n+      {\n+        message: req.body.message,\n+      },\n+      {\n+        new: true,\n+      }\n+    );\n+\n+    //redirect\n+    res.redirect(`/api/v1/posts/${req.query.postId}`);\n+  } catch (error) {\n+    next(appErr(error));\n+  }\n+};\n+\n+module.exports = {\n+  createCommentCtrl,\n+  commentDetailsCtrl,\n+  deleteCommentCtrl,\n+  upddateCommentCtrl,\n+};\n"
                }
            ],
            "date": 1692731874960,
            "name": "Commit-0",
            "content": "const Comment = require(\"../../model/comment/Comment\");\nconst Post = require(\"../../model/post/Post\");\nconst User = require(\"../../model/user/User\");\nconst appErr = require(\"../../utils/appErr\");\n//create\nconst createCommentCtrl = async (req, res, next) => {\n  const { message } = req.body;\n  try {\n    //Find the post\n    const post = await Post.findById(req.params.id);\n    //create the comment\n    const comment = await Comment.create({\n      user: req.session.userAuth,\n      message,\n      post: post._id,\n    });\n    //push the comment to post\n    post.comments.push(comment._id);\n    //find the user\n    const user = await User.findById(req.session.userAuth);\n    //push the comment into\n    user.comments.push(comment._id);\n    //disable validation\n    //save\n    await post.save({ validateBeforeSave: false });\n    await user.save({ validateBeforeSave: false });\n    \n    //redirect\n    res.redirect(`/api/v1/posts/${post._id}`);\n  } catch (error) {\n    next(appErr(error));\n  }\n};\n\n//single\nconst commentDetailsCtrl = async (req, res, next) => {\n  try {\n    const comment = await Comment.findById(req.params.id);\n    res.render(\"comments/updateComment\", {\n      comment,\n      error: \"\",\n    });\n    console.log(\"comment\", comment);\n  } catch (error) {\n    res.render(\"comments/updateComment\", {\n      error: error.message,\n    });\n  }\n};\n\n//delete\nconst deleteCommentCtrl = async (req, res, next) => {\n  console.log(req.query.postId);\n  try {\n    //find the comment\n    const comment = await Comment.findById(req.params.id);\n    //check if the comment belongs to the user\n    if (comment.user.toString() !== req.session.userAuth.toString()) {\n      return next(appErr(\"You are not allowed to delete this comment\", 403));\n    }\n    //delete comment\n    await Comment.findByIdAndDelete(req.params.id);\n    //redirect\n    res.redirect(`/api/v1/posts/${req.query.postId}`);\n  } catch (error) {\n    next(appErr(error));\n  }\n};\n\n//Update\nconst upddateCommentCtrl = async (req, res, next) => {\n  try {\n    console.log(\"query\", req.query);\n    //find the comment\n    const comment = await Comment.findById(req.params.id);\n\n    if (!comment) {\n      return next(appErr(\"Comment Not Found\"));\n    }\n    //check if the post belongs to the user\n    if (comment.user.toString() !== req.session.userAuth.toString()) {\n      return next(appErr(\"You are not allowed to update this comment\", 403));\n    }\n    //update\n    const commentUpdated = await Comment.findByIdAndUpdate(\n      req.params.id,\n      {\n        message: req.body.message,\n      },\n      {\n        new: true,\n      }\n    );\n\n    //redirect\n    res.redirect(`/api/v1/posts/${req.query.postId}`);\n  } catch (error) {\n    next(appErr(error));\n  }\n};\n\nmodule.exports = {\n  createCommentCtrl,\n  commentDetailsCtrl,\n  deleteCommentCtrl,\n  upddateCommentCtrl,\n};\n"
        }
    ]
}